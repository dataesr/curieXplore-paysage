{"version":3,"sources":["../../src/controllers/load-countries.js"],"names":["tranformData","data","countries","Set","map","structure","addresses","countryIso3","transformedData","iso","filter","mongoWrite","collectionName","db","listCollections","toArray","collections","find","collection","name","drop","console","log","rename","insertMany","req","res","Axios","get","PAYSAGE_URL","then","response","Structures","Categories","status","end","error"],"mappings":";;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AAEA,SAASA,YAAT,CAAsBC,IAAtB,EAA4B;AAC1B,MAAMC,SAAS,uCAAO,IAAIC,GAAJ,CAAQF,IAAI,CAACG,GAAL,CAAS,UAACC,SAAD;AAAA,WAAeA,SAAS,CAACC,SAAV,CAAoB,CAApB,EAAuBC,WAAtC;AAAA,GAAT,CAAR,CAAP,CAAf;AACA,MAAMC,eAAe,GAAGN,SAAS,CAACE,GAAV,CAAc,UAACK,GAAD;AAAA,WAAU;AAC9CA,MAAAA,GAAG,EAAHA,GAD8C;AAE9CR,MAAAA,IAAI,EAAEA,IAAI,CAACS,MAAL,CAAY,UAACL,SAAD;AAAA,eAAeA,SAAS,CAACC,SAAV,CAAoB,CAApB,EAAuBC,WAAvB,KAAuCE,GAAtD;AAAA,OAAZ;AAFwC,KAAV;AAAA,GAAd,CAAxB;AAKA,SAAOD,eAAP;AACD;;SAEcG,U;;;;;8FAAf,iBAA0BC,cAA1B,EAA0CX,IAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA,iBAEQA,IAFR;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAGgCY,UAAGC,eAAH,GAAqBC,OAArB,EAHhC;;AAAA;AAGYC,YAAAA,WAHZ;;AAAA,iBAIUA,WAAW,CAACC,IAAZ,CAAiB,UAACC,UAAD;AAAA,qBAAgBA,UAAU,CAACC,IAAX,eAAuBP,cAAvB,SAAhB;AAAA,aAAjB,CAJV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKcC,UAAGK,UAAH,WAAiBN,cAAjB,WAAuCQ,IAAvC,EALd;;AAAA;AAMQC,YAAAA,OAAO,CAACC,GAAR,kBAAsBV,cAAtB;;AANR;AAAA,iBAQUI,WAAW,CAACC,IAAZ,CAAiB,UAACC,UAAD;AAAA,qBAAgBA,UAAU,CAACC,IAAX,KAAoBP,cAApC;AAAA,aAAjB,CARV;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAScC,UAAGK,UAAH,CAAcN,cAAd,EAA8BW,MAA9B,WAAwCX,cAAxC,UATd;;AAAA;AAUQS,YAAAA,OAAO,CAACC,GAAR,yBAA6BV,cAA7B;;AAVR;AAAA;AAAA,mBAYYC,UAAGK,UAAH,CAAcN,cAAd,EAA8BY,UAA9B,CAAyCvB,IAAzC,CAZZ;;AAAA;AAaMoB,YAAAA,OAAO,CAACC,GAAR,0BAA8BV,cAA9B;;AAbN;AAAA;;AAAA;AAAA;AAAA;AAiBIS,YAAAA,OAAO,CAACC,GAAR;;AAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;eAqBe,kBAACG,GAAD,EAAMC,GAAN,EAAc;AAC3BL,EAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;;AACAK,oBAAMC,GAAN,CAAUC,mBAAV,EACGC,IADH,CACQ,UAACC,QAAD,EAAc;AAClB,QAAMvB,eAAe,GAAGR,YAAY,CAAC+B,QAAQ,CAAC9B,IAAT,CAAc+B,UAAf,CAApC;;AACA,QAAIrB,UAAU,CAAC,QAAD,EAAWH,eAAX,CAAV,IAAyCG,UAAU,CAAC,YAAD,EAAeoB,QAAQ,CAAC9B,IAAT,CAAcgC,UAA7B,CAAvD,EAAiG;AAC/FP,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX;AACD,KAFD,MAEO;AACLR,MAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX;AACD;;AACDR,IAAAA,GAAG,CAACS,GAAJ;AACD,GATH,WAUS,UAACC,KAAD,EAAW;AAChBf,IAAAA,OAAO,CAACC,GAAR,CAAYc,KAAZ;AACAV,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACA,UAAMC,KAAN;AACD,GAdH;AAeD,C","sourcesContent":["import Axios from 'axios';\nimport { db } from '../mongo';\nimport { PAYSAGE_URL } from '../config';\n\nfunction tranformData(data) {\n  const countries = [...new Set(data.map((structure) => structure.addresses[0].countryIso3))];\n  const transformedData = countries.map((iso) => ({\n    iso,\n    data: data.filter((structure) => structure.addresses[0].countryIso3 === iso),\n  }));\n\n  return transformedData;\n}\n\nasync function mongoWrite(collectionName, data) {\n  try {\n    if (data) {\n      const collections = await db.listCollections().toArray();\n      if (collections.find((collection) => collection.name === `${collectionName}_old`)) {\n        await db.collection(`${collectionName}_old`).drop();\n        console.log(`Delete ${collectionName}_old`);\n      }\n      if (collections.find((collection) => collection.name === collectionName)) {\n        await db.collection(collectionName).rename(`${collectionName}_old`);\n        console.log(`Save old data ${collectionName}`);\n      }\n      await db.collection(collectionName).insertMany(data);\n      console.log(`Write new data ${collectionName}`);\n    }\n    return;\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport default (req, res) => {\n  console.log('Load countries from paysage to mongodb');\n  Axios.get(PAYSAGE_URL)\n    .then((response) => {\n      const transformedData = tranformData(response.data.Structures);\n      if (mongoWrite('actors', transformedData) && mongoWrite('categories', response.data.Categories)) {\n        res.status(201);\n      } else {\n        res.status(500);\n      }\n      res.end();\n    })\n    .catch((error) => {\n      console.log(error);\n      res.status(500).end();\n      throw error;\n    });\n};\n"],"file":"load-countries.js"}